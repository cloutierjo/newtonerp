class PluralAccessorManager
!!!201996.java!!!	getPluralAccessorList(inout entity : AbstractOrmEntity) : PluralAccessor
		TreeMap<String, PluralAccessor> pluralAccessorList = new TreeMap<String, PluralAccessor>();

		addFromPositiveFlagPoolList(pluralAccessorList, entity);
		addFromNegativeListOfValueList(pluralAccessorList, entity);
		addFromNegativeFlagPoolList(pluralAccessorList, entity);

		return pluralAccessorList;
!!!202124.java!!!	getPluralAccessor(inout entity : AbstractOrmEntity, in accessorName : String, inout searchCriteriaEntity : AbstractOrmEntity) : PluralAccessor
		PluralAccessor pluralAccessor;

		TreeMap<String, PluralAccessor> pluralAccessorList = new TreeMap<String, PluralAccessor>();

		pluralAccessor = tryGetAccessorFromPositiveFlagPool(entity,
				accessorName, searchCriteriaEntity);

		if (pluralAccessor != null)
			return pluralAccessor;

		addFromNegativeListOfValueList(pluralAccessorList, entity);

		if (pluralAccessorList.containsKey(accessorName))
			return pluralAccessorList.get(accessorName);

		addFromNegativeFlagPoolList(pluralAccessorList, entity);

		if (pluralAccessorList.containsKey(accessorName))
			return pluralAccessorList.get(accessorName);

		String availableAccessorList = "";

		for (String currentAccessorName : pluralAccessorList.keySet())
			availableAccessorList += currentAccessorName + " ";

		availableAccessorList = availableAccessorList.trim();

		if (pluralAccessorList.size() > 0)
			throw new RuntimeException(
					"Accesseur introuvable. Veuillez utiliser un des accesseurs suivant dans ce contexte: "
							+ availableAccessorList);
		throw new RuntimeException(
				"Aucun accesseur disponible dans ce contexte");
!!!202252.java!!!	getPluralAccessor(inout entity : AbstractOrmEntity, in accessorName : String) : PluralAccessor
		return getPluralAccessor(entity, accessorName, null);
!!!202380.java!!!	addFromNegativeFlagPoolList(inout pluralAccessorList : TreeMap<String, PluralAccessor>, inout entity : AbstractOrmEntity) : void
		PluralAccessor intermediatePluralAccessor;
		Vector<AbstractOrmEntity> resultSet;
		PluralAccessor pluralAccessor;
		AbstractOrmEntity intermediateEntityDefinition;
		FlagPool flagPool;

		for (String flagPoolName : entity.getNegativeFlagPoolList().keySet())
		{
			flagPool = entity.getNegativeFlagPoolList().get(flagPoolName);

			if (entity.getClass() != flagPool.getForeignEntityDefinition()
					.getClass())
				continue;

			// On skip la gestion des flag pool pas concernÃ©s
			if (!flagPool.getIntermediateEntityDefinition().getFields()
					.containsFieldName(entity.getForeignKeyName()))
				continue;

			try
			{
				intermediateEntityDefinition = flagPool
						.getIntermediateEntityDefinition().getClass()
						.newInstance();
			} catch (InstantiationException e)
			{
				throw new RuntimeException(e);
			} catch (IllegalAccessException e)
			{
				throw new RuntimeException(e);
			}
			intermediateEntityDefinition.initFields();

			intermediateEntityDefinition.setData(entity.getForeignKeyName(),
					entity.getPrimaryKeyValue());

			intermediatePluralAccessor = new PluralAccessor(
					intermediateEntityDefinition, Orm
							.select(intermediateEntityDefinition));

			pluralAccessor = null;
			for (AbstractOrmEntity intermediateEntity : intermediatePluralAccessor)
			{
				String keyOut = flagPool.getIntermediateKeyIn();
				AbstractOrmEntity foreignEntity = flagPool
						.getSourceEntityDefinition();
				try
				{
					foreignEntity = foreignEntity.getClass().newInstance();
				} catch (InstantiationException e)
				{
					throw new RuntimeException(e);
				} catch (IllegalAccessException e)
				{
					throw new RuntimeException(e);
				}
				foreignEntity.initFields();
				foreignEntity.setData(foreignEntity.getPrimaryKeyName(),
						intermediateEntity.getData(keyOut));

				resultSet = Orm.select(foreignEntity);

				if (pluralAccessor == null)
					pluralAccessor = new PluralAccessor(foreignEntity);

				if (resultSet.size() > 0)
					pluralAccessor.addAll(resultSet);
			}

			if (flagPool.getSourceEntityDefinition().getClass() != entity
					.getClass())
				pluralAccessorList.put(flagPool.getSourceEntityDefinition()
						.getNaturalKeyName(), pluralAccessor);
		}
!!!202508.java!!!	addFromNegativeListOfValueList(inout pluralAccessorList : TreeMap<String, PluralAccessor>, inout entity : AbstractOrmEntity) : void
		// searchCriteriaEntity can be null

		AbstractOrmEntity foreignEntityDefinition;

		for (ListOfValue listOfValue : new HashSet<ListOfValue>(entity
				.getNegativeListOfValueList()))
		{
			if (!entity.getSystemName().equals(
					listOfValue.getForeignEntityDefinition().getSystemName()))
				continue;

			try
			{
				foreignEntityDefinition = listOfValue
						.getSourceEntityDefinition().getClass().newInstance();
			} catch (InstantiationException e)
			{
				throw new RuntimeException(e);
			} catch (IllegalAccessException e)
			{
				throw new RuntimeException(e);
			}
			foreignEntityDefinition.initFields();

			if (!foreignEntityDefinition.getFields().containsFieldName(
					entity.getForeignKeyName()))
				continue;

			foreignEntityDefinition.setData(entity.getForeignKeyName(), entity
					.getPrimaryKeyValue());

			Vector<AbstractOrmEntity> resultSet = Orm
					.select(foreignEntityDefinition);

			pluralAccessorList.put(foreignEntityDefinition.getSystemName(),
					new PluralAccessor(foreignEntityDefinition, resultSet));
		}
!!!202636.java!!!	addFromPositiveFlagPoolList(inout pluralAccessorList : TreeMap<String, PluralAccessor>, inout entity : AbstractOrmEntity) : void
		PluralAccessor pluralAccessor;
		FlagPool flagPool;

		for (String flagPoolName : entity.getPositiveFlagPoolList().keySet())
		{
			flagPool = entity.getPositiveFlagPoolList().get(flagPoolName);
			pluralAccessor = getPositivePluralAccessor(entity, flagPool, null);

			if (pluralAccessor != null)
				pluralAccessorList.put(flagPool.getForeignEntityDefinition()
						.getSystemName(), pluralAccessor);
		}
!!!202764.java!!!	tryGetAccessorFromPositiveFlagPool(inout entity : AbstractOrmEntity, in accessorName : String, inout searchCriteriaEntity : AbstractOrmEntity) : PluralAccessor
		// searchCriteriaEntity can be null

		accessorName = accessorName.toLowerCase();
		PluralAccessor pluralAccessor;

		Hashtable<String, FlagPool> positiveFlagPoolList = entity
				.getPositiveFlagPoolList();

		FlagPool selectedFlagPool = null;

		for (FlagPool currentFlagPool : positiveFlagPoolList.values())
		{
			if (currentFlagPool.getForeignEntityDefinition().getSystemName()
					.toLowerCase().equals(accessorName))
			{
				selectedFlagPool = currentFlagPool;
				break;
			}
			else if (currentFlagPool.getForeignEntityDefinition()
					.getPrimaryKeyName().toLowerCase().equals(accessorName))
			{
				selectedFlagPool = currentFlagPool;
				break;
			}
			else if (currentFlagPool.getForeignEntityDefinition()
					.getForeignKeyName().toLowerCase().equals(accessorName))
			{
				selectedFlagPool = currentFlagPool;
				break;
			}
		}

		if (selectedFlagPool == null)
			selectedFlagPool = positiveFlagPoolList.get(accessorName);

		if (selectedFlagPool == null)
			return null;

		pluralAccessor = getPositivePluralAccessor(entity, selectedFlagPool,
				searchCriteriaEntity);

		return pluralAccessor;
!!!202892.java!!!	getPositivePluralAccessor(inout entity : AbstractOrmEntity, inout flagPool : FlagPool, inout searchCriteriaEntity : AbstractOrmEntity) : PluralAccessor
		// searchCriteriaEntity can be null

		flagPool.query(entity.getPrimaryKeyName(), entity.getPrimaryKeyValue());

		return flagPool.getPositivePluralForeignAccessor(searchCriteriaEntity);
