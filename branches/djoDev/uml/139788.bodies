class OrmFonction
!!!196108.java!!!	getSgbd() : AbstractSgbd
		if (sgbd == null)
			sgbd = buildSgbd();
		return sgbd;
!!!196236.java!!!	buildSgbd() : AbstractSgbd
		if (ConfigManager.loadStringProperty("dmbs-name").equals("sqlite"))
			return new SgbdSqlite();// On cré la référence
		throw new OrmException("Invalid DBMS type");
!!!196364.java!!!	createNonExistentTables() : void
		for (String key : ListModule.getAllModules())
		{
			try
			{
				Module module = ListModule.getModule(key);
				createNonExistentTables(module);
			} catch (ModuleException e)
			{
				// PrintStackTrace nécéssaire pour afficher l'information de
				// l'exception précédente. Il faudrait mettre l'ancien
				// stackTrace dans le nouveau
				e.printStackTrace();
				throw new ModuleException(
						"Erreur à la construction de la requête pour créer les tables : "
								+ e.getMessage());
			}
		}
!!!196492.java!!!	createNonExistentTables(inout module : Module) : void
		Collection<AbstractOrmEntity> moduleEntities = module
				.getEntityDefinitionList().values();

		// For each entity in the list of module entities
		for (AbstractOrmEntity entity : moduleEntities)
		{
			createTableForEntity(entity);
			addMissingColumnsForEntity(entity);
			createIndexesForEntity(entity);
		}
!!!196620.java!!!	createTableForEntity(inout entity : AbstractOrmEntity) : void
		getSgbd().createTableForEntity(entity);
!!!196748.java!!!	addMissingColumnsForEntity(inout entity : AbstractOrmEntity) : void
		for (Field<?> field : entity.getFields())
		{
			try
			{
				getSgbd().addColumnToTable(entity, field);
			} catch (OrmException e)
			{
				Logger.warning("[ORM] Champ déjà dans entité");
			}
		}
!!!196876.java!!!	createIndexesForEntity(inout entity : AbstractOrmEntity) : void
		// On cré des index pour chaque clef étrangère
		for (String fieldName : entity.getFields().getKeyList())
			if ((fieldName.endsWith("ID") && !fieldName.startsWith("PK"))
					|| fieldName.startsWith("system"))
				getSgbd().createIndex(entity.getSystemName(), fieldName);
!!!197004.java!!!	doBackupIfTimeIntervalAllows() : void
		long currentTime = BackupManager.getCurrentTime();
		long latestBackupTime = getSgbd().getLatestBackupTime();
		long desiredBackupTimeInterval = BackupManager
				.getDesiredBackupIntervalTime();

		if (currentTime - latestBackupTime > desiredBackupTimeInterval)
			getSgbd().doBackup();
