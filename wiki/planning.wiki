#labels PLANNING
Voici le tableau de priorité tel qu'établis en classe.
le temps donné est en heure pour une personne nous avons donc de disponible pour chaque sprint 5*15h= 75h, évidement de cela il faut soustraire un certain temps d'administration et de débuggage/imprévue

reste a faire une prévision des dates, voici la date des cours du sprint 1:
mer 23 
jeu 24 
mer 30 
jeu 1 
mer 7 
jeu 8 

j'ai fais un first draft de la répartition dans le temp des différente tache celui-ci ne tien pas qu'on des assignation tache/programmeur il y auras donc une révision de faite a ce moment la...

|| *priorité* || *pokerScore* || *nom de la classe*  || *temp (h)* || *sprint (#)* || date Début || date fin *fonctionnel* || 
|| 1 || 0 || starter || 1 || 1 || mer 23 || mer 23 || 
|| 2 || 0,5 || DataOrm || 8 || 1 || mer 23 || jeu 1 || 
|| 2 || 0,5 || Entity || 1 || 1 || mer 23 || jeu 1 || 
|| 2 || 0,5 || OrmizableEntity || 2 || 1 || mer 23 || jeu 1 || 
|| 5 || 1 || Module || 3 || 1 || mer 23 || jeu 24 || 
|| 6 || 1,5 || Action || 1 || 1 || mer 23 || jeu 24 || 
|| 7 || 2 || commandRouter || 7 || 1 || mer 23 || mer 30 || 
|| 8 || 2,1 || servlet || 7 || 1 || mer 23 || mer 30 || 
|| 9 || 2,2 || IViewer || 4 || 1 || mer 30  || mer 7 || 
|| 9 || 2,2 || viewable || 1 || 1 || mer 30  || mer 7 || 
|| 9 || 2,2 || mainViewer || 6 || 1 || mer 30  || mer 7 || 
|| 13 || 3 || UserRightModule || 7 || 1 || jeu 1 || mer 7 || 
|| -- || -- || -- || 48 || 1 || mer 23 || jeu 8 ||
|| 14 || 5 || Task || 17 || 2 || - || - || 
|| 14 || 5 || AtomicSpecification || " || 2 || - || - ||
|| 14 || 5 || CompositeSpecification || " || 2 || - || - ||
|| 14 || 5 || Ispecification || " || 2 || - || - ||
|| 18 || 5,2 || TaskModule || 5 || 2 || - || - ||
|| 18 || 5,2 || TaskViewer || 5 || 2 || - || - ||
|| 20 || 5,3 || TaskManager || 5 || 2 || - || - ||
|| -- || -- || -- || 32 || 1 || - || - ||

le reste du temps du sprint 2 ainsi que le sprint 3 sera principalement allouer a écrire des modules dont la priorité sera déterminé plus tard dans le processus et un certain déboggage de l'architecture pour en assuré sa stabilité. Les modules étant des éléments "simple" et indépendant il ne devrait pas causé de problème difficile a réglé ni grave du point de l'application complète (le reste fonctionnera tout de même)