#labels Analyse-CRC
<wiki:comment>

voici le format a suivre pour les CRC, ne vous occupé pas du HTML si sa vous mélange, vous n'Avez qu'a remplacé ce qui est entre [[ ]] (en effaçant les crochet)


== [[nom de la classe]] ==
<table border=1>
   <tr>
       <td width=60% width=70%> [[proprio]] </td>
       <td rowspan=2> [[
                      * classe avec laquel elle interagit
                      * autre classe]]
       </td>
   </tr>
   <tr>
       <td>[[
           * action fais par la classe
           * autre action]]
       </td>
   </tr>
</table>

</wiki:comment>

<wiki:toc max_depth="1" />

== viewable (visible par le main viewer) ==
<table border=1>
   <tr>
       <td width=60% width=70%> a déterminé </td>
       <td rowspan=2> 
					* entity
					* viewer
       </td>
   </tr>
   <tr>
       <td>
			* formatte les donnée pour etre compréhensible par le bon viewer
       </td>
   </tr>
</table>

== viewer ==
<table border=1>
   <tr>
       <td width=60% width=70%> a déterminé </td>
       <td rowspan=2> 
                      * autre viewer
                      * viewable
       </td>
   </tr>
   <tr>
       <td>
			* crée le HTML dont il est responsable (donc pas une page complete)
			* appelle les autre viewer néscéssaire a la création de *son* html
			* une implementation de viewer peut contenir des méthode utilitaire internepour compartimenté le code
			* retourn le html créé
       </td>
   </tr>
</table>

== mainViewer ==
<table border=1>
   <tr>
       <td width=60% width=70%> a déterminé </td>
       <td rowspan=2> 
				* servlet
				* specizedViewer
       </td>
   </tr>
   <tr>
       <td>
			* créé le pageHeader, page footer
			* apelle le MenuViewer et le SpecializeViewer
			* retourne la page html complete
       </td>
   </tr>
</table>


== servlet ==
<table border=1>
   <tr>
       <td width=60% width=70%> a déterminé </td>
       <td rowspan=2> 
				* CommandRouter
				* mainViewer
       </td>
   </tr>
   <tr>
       <td>
			* recois les requette du client et les envoys a l'event listner
			* recois la réponse des module et l'envois a mainViewer
			* recois le html du mainViewer et l'envois au client
       </td>
   </tr>
</table>

Voir pages pour info sur servlet
[http://www.exampledepot.com/egs/javax.servlet/com_mycompany_MyServlet.html]
[http://java.sun.com/products/servlet/articles/tutorial/]
[http://www.google.com.ca/search?q=tomcat+embedded]

== Module ==
<table border=1>
   <tr>
       <td width=60% width=70%> a déterminé </td>
       <td rowspan=2> 
				* Action
				* CommandRouter
				* Entity
       </td>
   </tr>
   <tr>
       <td>
			* contient une reference static a l'orm
			* sert de model pour un module
       </td>
   </tr>
</table>


== Starter ==
<table border=1>
   <tr>
       <td width=60% width=70%> a déterminé </td>
       <td rowspan=2> 
				* servlet
				* DataOrm ?
       </td>
   </tr>
   <tr>
       <td>
                        * sert a lancé l'aplication serveur
                        * lance la vérification de dépendance
                        * lance la vérification de nouveau module et fais faire les installation
                        * lance le server (servlet)
       </td>
   </tr>
</table>

== CommandRouter ==
<table border=1>
   <tr>
       <td width=60% width=70%> a déterminé </td>
       <td rowspan=2> 
				* Module
				* Servlet

       </td>
   </tr>
   <tr>
       <td>
			* route le requête client vers le bon module
       </td>
   </tr>
</table>