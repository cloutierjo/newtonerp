#labels Analyse-CRC
== CompositeSpecification ==
<table border="1">
   <tr>
       <td width="60%" width="70%">Guillaume</td>
       <td rowspan="2">
           * ISpecification (interface)
           * CompositeSpecification (même classe récursivement)
           * AtomicSpecification
           * Task
       </td>
   </tr>
   <tr>
       <td>
           * Teste si la spécification est présentement satisfaite en testant ses sous-spécifications et en appliquant un opérateur "et" ou "ou"
       </td>
   </tr>
</table>

== AtomicSpecification ==
<table border="1">
   <tr>
       <td width="60%" width="70%">Guillaume</td>
       <td rowspan="2">
           * ISpecification (interface)
           * CompositeSpecification
           * Task
       </td>
   </tr>
   <tr>
       <td>
           * Teste si la spécification atomique est présentement satisfaite
       </td>
   </tr>
</table>

== Task ==
<table border="1">
   <tr>
       <td width="60%" width="70%">Guillaume</td>
       <td rowspan="2">
           * ISpecification (interface)
           * Action
           * TaskModule
           * TaskManager
           * Entity (pour critère de recherche pour créer vecteur d'entités affectées)
       </td>
   </tr>
   <tr>
       <td>
           * Lorsque que la tâche est activée, effectue action si la spécification est pas satisfaite 
       </td>
   </tr>
</table>

== TaskManager ==
<table border="1">
   <tr>
       <td width="60%" width="70%">Guillaume</td>
       <td rowspan="2">
           * Task
           * DataOrm
       </td>
   </tr>
   <tr>
       <td>
           * Active tous les tâches associées à une entiée fournie par l'Orm.
           * Gère de manière persistante les associations entre les types d'entités et les tâches associées
       </td>
   </tr>
</table>

== TaskModule ==
<table border="1">
   <tr>
       <td width="60%" width="70%">Guillaume</td>
       <td rowspan="2">
           * Module (TaskModule est une sous-classe de Module)
           * MainModule (TaskModule est une composante de MainModule)
           * TaskManager (TaskModule cré des tâches dans le taskManager)
           * TaskViewer (TaskViewer permet de voir les Tasks pour les modifier)
           * Action (ce sont les actions d'un module qui effectuent les modifications sur les entitées)
       </td>
   </tr>
   <tr>
       <td>
           * Permet de modifier/supprimer/créer des Tasks dans le TaskManager à l'aide du TaskViewer
       </td>
   </tr>
</table>

== TaskViewer ==
<table border="1">
   <tr>
       <td width="60%" width="70%">Guillaume</td>
       <td rowspan="2">
           * Viewer (TaskViewer est une composante de Viewer)
           * IViewer (TaskViewer implémente IViewer)
           * Task (TaskViewer permet de voir une Task)
       </td>
   </tr>
   <tr>
       <td>
           * Permet de voir une Task sous forme de "TreeView" de manière à pour la modifier
       </td>
   </tr>
</table>

== Action ==
<table border="1">
   <tr>
       <td width="60%" width="70%">Guillaume</td>
       <td rowspan="2">
           * Module (une action est une composante d'un module)
           * Task (une action peut être déclancher par une task si sa spécification est vraie)
           * Entity pour (critère de recherche, changements à faire)
       </td>
   </tr>
   <tr>
       <td>
           * Permet d'encoder une modification sur certaines entité en contenant les critères de recherches?
           * Permet de faire une modification statique?
           * Permet de faire une modification de manière dynamique (genre de binding variable?)
       </td>
   </tr>
</table>