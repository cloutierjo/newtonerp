package newtonERP.orm;

import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;

import newtonERP.orm.exceptions.OrmException;
import newtonERP.orm.exceptions.OrmFieldNotFoundException;
import newtonERP.orm.sgbd.SgbdSqlite;
import newtonERP.orm.sgbd.Sgbdable;

/**
 * 
 * @author r3hallejo, r3lacasgu
 * 
 *         Basic class for the orm. It is used to put the objects in the databse
 *         using SqLite3 and its java binding. The orm will receive an entity
 *         from which the orm will perform various tasks such as generating the
 *         query. Then it's gonna send the query to the SgbdSqlite class to
 *         execute it.
 */
public class Orm
{
    private static Sgbdable sgbd = new SgbdSqlite();

    /**
     * Method used to do search queries done from the views to the databse. The
     * search criterias that has been passed in parameter are a list of string
     * that has been generated by the view modules
     * 
     * @param searchEntity the entity that has to be researched
     * @param searchCriteriasParam the search criterias formatted into strings
     * @return a vector of ormizable entities
     * @throws OrmException an exception that can occur in the orm
     */
    public static Vector<Ormizable> select(Ormizable searchEntity,
	    Vector<String> searchCriteriasParam) throws OrmException
    {
	Vector<Ormizable> returnedEntities = new Vector<Ormizable>();
	String sqlQuery = "SELECT * FROM " + searchEntity.getTableName()
		+ " WHERE ";

	sqlQuery = buildWhereClauseForQuery(sqlQuery, searchCriteriasParam);

	ResultSet rs = sgbd.Execute(sqlQuery, OrmActions.SEARCH);
	System.out.println("SQL query produced : " + sqlQuery);

	// Now we will iterate through the result set to create the entities
	try
	{
	    // Fort each row in my result set
	    while (rs.next())
	    {
		// Here we initialize our instance of the ormizable entity. Our
		// Fields array and our parameters hashtable
		Ormizable entity = searchEntity.getClass().newInstance();
		Field[] fields = entity.getClass().getFields();
		Hashtable<String, Object> parameters = new Hashtable<String, Object>();

		// we add each column to the hashtable plus it's value
		for (int i = 0; i < fields.length; i++)
		    parameters.put(fields[i].getName(), rs.getObject(i));

		// We format the data into the entities
		entity.setOrmizableData(parameters);

		// We add the entities to our vector of created entities
		returnedEntities.add(entity);
	    }
	} catch (Exception e)
	{
	    e.printStackTrace();
	}

	// We print out the entities to be sur we have the good result
	printEntitiesForTest(returnedEntities);

	return returnedEntities;
    }

    /**
     * Method used to add an entity in the databse
     * 
     * @param newEntity the entity to be inserted
     * @throws OrmException an exception that can occur into the orm
     */
    @SuppressWarnings("unchecked")
    public static void insert(Ormizable newEntity) throws OrmException
    {
	Hashtable<String, String> data = newEntity.getOrmizableData();
	String sqlQuery = "";
	sqlQuery += "INSERT INTO " + newEntity.getTableName() + " (";

	// We now iterate through the key set so we can add the fields to the
	// query
	Iterator keySetIterator = data.keySet().iterator();
	while (keySetIterator.hasNext())
	{
	    // Retrieve key
	    Object key = keySetIterator.next();

	    if (!keySetIterator.hasNext())
		sqlQuery += "'" + key.toString() + "') ";
	    else
		sqlQuery += "'" + key.toString() + "', ";
	}

	// We add the VALUES keyword for the query
	sqlQuery += "VALUES (";

	// Now we add the values to the query
	Iterator valueIterator = data.values().iterator();
	while (valueIterator.hasNext())
	{
	    Object value = valueIterator.next();

	    if (!valueIterator.hasNext())
		sqlQuery += "'" + value.toString() + "') ";
	    else
		sqlQuery += "'" + value.toString() + "', ";
	}

	// We execute the query and print out the sql query produced to see we
	// have no errors
	sgbd.Execute(sqlQuery, OrmActions.INSERT);
	System.out.println("SQL query produced : " + sqlQuery);
    }

    /**
     * Method used to delete an entity from the database
     * 
     * @param searchEntity the entity to be researched
     * @param searchCriterias the search criterias for the where clause
     * @throws OrmException an exception that can occur into the orm
     */
    public static void delete(Ormizable searchEntity,
	    Vector<String> searchCriterias) throws OrmException
    {
	String sqlQuery = "DELETE FROM " + searchEntity.getTableName()
		+ " WHERE ";

	sqlQuery = buildWhereClauseForQuery(sqlQuery, searchCriterias);

	sgbd.Execute(sqlQuery, OrmActions.DELETE);
	System.out.println("Sql query produced : " + sqlQuery);
    }

    /**
     * Method used to update / change an entity
     * 
     * @param searchEntity the entity to be researched
     * @param entityContainingChanges the entity that has been changed and will
     *            be in the orm
     * @param searchCriterias the criterias used by the update
     * @throws OrmException an exception that can occur into the orm
     */
    public static void update(Ormizable searchEntity,
	    Ormizable entityContainingChanges, Vector<String> searchCriterias)
	    throws OrmException
    {
	// To implementation is to be finished
	String sqlQuery = "UPDATE";

	sqlQuery = buildWhereClauseForQuery(sqlQuery, searchCriterias);
    }

    /**
     * Test method not used by the program itself but only for debugging
     * purposes
     * 
     * @param entitiesParam the entities that will be printed out
     */
    public static void printEntitiesForTest(Vector<Ormizable> entitiesParam)
    {
	System.out.println("Entered in print method");

	Vector<Ormizable> entities = entitiesParam;

	for (Ormizable entity : entities)
	{
	    try
	    {
		Hashtable<String, String> data = entity.getOrmizableData();

		for (Object key : data.keySet())
		{
		    System.out.println(key.toString() + " : " + data.get(key));
		}
	    } catch (OrmFieldNotFoundException e)
	    {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }

	}
    }

    /**
     * Method used to build the where clause for the delete, select and update
     * methods
     * 
     * @param sqlQuery the non-finiched sqlQuery that has been produced
     * @param searchCriterias the parameters of the where clause
     * @return sqlQuery
     */
    private static String buildWhereClauseForQuery(String sqlQuery,
	    Vector<String> searchCriterias)
    {
	for (String parameter : searchCriterias)
	    sqlQuery += parameter;

	return sqlQuery;
    }
}
