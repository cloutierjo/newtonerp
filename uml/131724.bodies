class GenerateSourceCode
!!!148620.java!!!	GenerateSourceCode()
		super(new ModuleEntity());
!!!148748.java!!!	doAction(inout entity : AbstractEntity, inout parameters : Hashtable<String, String>) : AbstractEntity
		ModuleEntity moduleEntity = (ModuleEntity) entity;

		String moduleClassCode;

		String moduleClassFileName = SourceCodeBuilder
				.buildModuleClassFileName(moduleEntity);

		BaseViewerData edit = moduleEntity.editUI(parameters);

		if (fileExists(moduleClassFileName))
		{
			edit.addAlertMessage("La classe du module existe déjà.");
		}
		else
		{
			Hashtable<String, String> actionFileAndCodeList = buildActionFileAndCodeList(moduleEntity);
			Hashtable<String, String> entityFileAndCodeList = buildEntityFileAndCodeList(moduleEntity);

			for (String fileName : actionFileAndCodeList.keySet())
			{
				if (fileExists(fileName))
				{
					edit.addAlertMessage("Le fichier " + fileName
							+ " de la classe de l'action existe déjà.");
					return edit;
				}
			}

			for (String fileName : entityFileAndCodeList.keySet())
			{
				if (fileExists(fileName))
				{
					edit.addAlertMessage("Le fichier " + fileName
							+ " de la classe de l'entité existe déjà.");
					return edit;
				}
			}

			moduleClassCode = SourceCodeBuilder
					.buildModuleSourceCode(moduleEntity);

			SourceCodeBuilder.createDirectoriesForModule(moduleEntity);

			writeClassFile(moduleClassFileName, moduleClassCode);
			edit.addNormalMessage("La classe du module a été générée.");

			for (String fileName : actionFileAndCodeList.keySet())
				writeClassFile(fileName, actionFileAndCodeList.get(fileName));

			for (String fileName : entityFileAndCodeList.keySet())
				writeClassFile(fileName, entityFileAndCodeList.get(fileName));
		}

		return edit;
!!!148876.java!!!	buildEntityFileAndCodeList(inout moduleEntity : ModuleEntity) : Hashtable<String, String>
		Hashtable<String, String> fileAndCodeList = new Hashtable<String, String>();

		String path = SourceCodeBuilder.getModulePackagePath(moduleEntity)
				+ "/entityDefinitions";

		String fileName;
		String sourceCode;

		for (EntityEntity entityEntity : moduleEntity.getEntityEntityList())
		{
			fileName = path + "/" + entityEntity.getDataString("systemName")
					+ ".java";
			sourceCode = EntitySourceCodeBuilder.build(entityEntity);
			fileAndCodeList.put(fileName, sourceCode);
		}

		return fileAndCodeList;
!!!149004.java!!!	buildActionFileAndCodeList(inout moduleEntity : ModuleEntity) : Hashtable<String, String>
		Hashtable<String, String> fileAndCodeList = new Hashtable<String, String>();

		String path = SourceCodeBuilder.getModulePackagePath(moduleEntity)
				+ "/actions";

		String fileName;
		String sourceCode;

		for (ActionEntity actionEntity : moduleEntity.getActionEntityList())
		{
			fileName = path + "/" + actionEntity.getDataString("systemName")
					+ ".java";
			sourceCode = ActionSourceCodeBuilder.build(actionEntity);
			fileAndCodeList.put(fileName, sourceCode);
		}

		return fileAndCodeList;
!!!149132.java!!!	fileExists(in moduleClassFileName : String) : boolean
		File file = new File(moduleClassFileName);
		return file.exists();
!!!149260.java!!!	writeClassFile(in fileName : String, in classCode : String) : void
		try
		{
			File file = new File(fileName);
			file.createNewFile();

			FileWriter outFile;

			outFile = new FileWriter(fileName);

			PrintWriter out = new PrintWriter(outFile);
			out.print(classCode);
			out.close();
		} catch (IOException e)
		{
			throw new RuntimeException(e);
		}
