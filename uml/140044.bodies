class FlagPoolManager
!!!198028.java!!!	applyFlagPoolChanges(inout sourceEntity : AbstractOrmEntity, inout flagPoolList : Iterable<FlagPool>, inout parameters : Hashtable<String, String>) : void
		for (FlagPool flagPool : flagPoolList)
			applyFlagPoolChanges(sourceEntity, flagPool, parameters);
!!!198156.java!!!	applyFlagPoolChanges(inout sourceEntity : AbstractOrmEntity, inout flagPool : FlagPool, inout parameters : Hashtable<String, String>) : void
		flagPool.query(sourceEntity.getPrimaryKeyName(), sourceEntity
				.getPrimaryKeyValue());

		Collection<String> availableElementList = flagPool
				.getAvailableElementList().values();

		for (String availableElement : availableElementList)
		{

			AbstractOrmEntity searchEntity = getSearchEntity(sourceEntity,
					flagPool, availableElement);

			if (parameters.containsKey(availableElement))
			{
				Orm.insertUnique(searchEntity);
			}
			else
			{
				Orm.delete(searchEntity);
			}

		}

		flagPool.query(sourceEntity.getPrimaryKeyName(), sourceEntity
				.getPrimaryKeyValue());

!!!198284.java!!!	getSearchEntity(inout sourceEntity : AbstractOrmEntity, inout flagPool : FlagPool, in elementName : String) : AbstractOrmEntity
		if (elementName.contains("."))
		{
			elementName = elementName.substring(
					elementName.lastIndexOf('.') + 1).trim();
		}

		int keyIn = sourceEntity.getPrimaryKeyValue();
		int keyOut = Integer.parseInt(elementName);

		String intermediateKeyInName = flagPool.getIntermediateKeyIn();
		String intermediateKeyOutName = flagPool.getIntermediateKeyOut();

		AbstractOrmEntity searchEntity;
		try
		{
			searchEntity = flagPool.getIntermediateEntityDefinition()
					.getClass().newInstance();
		} catch (InstantiationException e)
		{
			throw new RuntimeException(e);
		} catch (IllegalAccessException e)
		{
			throw new RuntimeException(e);
		}
		searchEntity.setData(intermediateKeyInName, keyIn);
		searchEntity.setData(intermediateKeyOutName, keyOut);
		return searchEntity;
!!!198412.java!!!	addFlagPool(inout sourceEntity : AbstractOrmEntity, inout foreignEntityDefinition : AbstractOrmEntity) : void

		AbstractOrmEntity intermediateEntityDefinition = buildIntermediateEntityDefinition(
				sourceEntity, foreignEntityDefinition);

		String intermediateKeyIn = sourceEntity.getForeignKeyName();
		String intermediateKeyOut = foreignEntityDefinition.getForeignKeyName();

		addFlagPool(sourceEntity, foreignEntityDefinition.getNaturalKeyName(),
				intermediateEntityDefinition, intermediateKeyIn,
				intermediateKeyOut, foreignEntityDefinition,
				foreignEntityDefinition.getPrimaryKeyName(),
				foreignEntityDefinition.getNaturalKeyNameList());
!!!198540.java!!!	buildIntermediateEntityDefinition(inout entity1 : AbstractOrmEntity, inout entity2 : AbstractOrmEntity) : AbstractOrmEntity
		String entityName1, entityName2, intermediateEntityName;

		entityName1 = entity1.getSystemName();
		entityName2 = entity2.getSystemName();

		if (entityName1.compareTo(entityName2) < 0)
			intermediateEntityName = entityName1 + entityName2;
		else
			intermediateEntityName = entityName2 + entityName1;

		String classPath = entity1.getClass().getName();
		classPath = classPath.substring(0, classPath.lastIndexOf('.'));

		intermediateEntityName = classPath + "." + intermediateEntityName;

		AbstractOrmEntity intermediateEntityDefinition;
		try
		{
			intermediateEntityDefinition = (AbstractOrmEntity) ModuleLoader
					.loadClass(intermediateEntityName).newInstance();
		} catch (InstantiationException e)
		{
			throw new RuntimeException(e);
		} catch (IllegalAccessException e)
		{
			throw new RuntimeException(e);
		}

		intermediateEntityDefinition.initFields();

		return intermediateEntityDefinition;
!!!198668.java!!!	addFlagPool(inout sourceEntity : AbstractOrmEntity, in visibleDescription : String, inout intermediateEntityDefinition : AbstractOrmEntity, in intermediateKeyIn : String, in intermediateKeyOut : String, inout foreignEntityDefinition : AbstractOrmEntity, in foreignKey : String, inout foreignDescriptionUiControls : Vector<String>) : void
		FlagPool flagPool = new FlagPool(sourceEntity, visibleDescription,
				intermediateEntityDefinition, intermediateKeyIn,
				intermediateKeyOut, foreignEntityDefinition, foreignKey,
				foreignDescriptionUiControls);

		sourceEntity.addPositiveFlagPool(visibleDescription, flagPool);
		foreignEntityDefinition.addNegativeFlagPool(visibleDescription,
				flagPool);
