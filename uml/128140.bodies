class Module
!!!128012.java!!!	Module()
		entityDefinitionList = new Hashtable<String, AbstractOrmEntity>();

		actionList = new Hashtable<String, AbstractAction>();
!!!128140.java!!!	setDefaultAction(inout action : AbstractAction) : void
		if (action instanceof BaseAction)
		{
			defaultAction = ((BaseAction) (action)).getSystemName();
			defaultEntity = ((BaseAction) (action)).getEntity().getSystemName();
		}
		else
		{
			defaultAction = action.getSystemName();
		}
!!!128268.java!!!	getDefaultAction() : String
		if (defaultAction == null)
		{
			if (getEntityDefinitionList().size() < 1)
				throw new ActionNotFoundException(
						"Impossible de définir une action par default car aucune entité n'est utilisable.");

			Vector<AbstractOrmEntity> currentDefinitionList = new Vector<AbstractOrmEntity>(
					getEntityDefinitionList().values());

			defaultEntity = currentDefinitionList.get(0).getSystemName();
			defaultAction = "GetList";
		}

		return defaultAction;
!!!128396.java!!!	initAction(in path : String) : void
		if (!ActionCache.containsKey(getSystemName()))
		{
			File folder = new File(path + "/actions");
			File[] listOfFiles = folder.listFiles();

			for (int i = 0; i < listOfFiles.length; i++)
			{
				if (listOfFiles[i].getName().endsWith(".class")
						&& !listOfFiles[i].getName().contains("$"))
				{
					String className = getClass().getPackage().getName()
							+ ".actions."
							+ listOfFiles[i].getName().split("\\.class")[0];
					AbstractAction act;
					try
					{
						act = (AbstractAction) ModuleLoader
								.loadClass(className).newInstance();
					} catch (InstantiationException e)
					{
						throw new RuntimeException(e);
					} catch (IllegalAccessException e)
					{
						throw new RuntimeException(e);
					}
					addAction(act);
				}
			}
			ActionCache.put(getSystemName(), actionList);
		}
		else
		{
			actionList = ActionCache.get(getSystemName());
		}
!!!128524.java!!!	initEntityDefinition(in path : String) : void
		if (!entityCache.containsKey(getSystemName()))
		{
			File folder = new File(path + "/entityDefinitions");
			File[] listOfFiles = folder.listFiles();

			for (int i = 0; i < listOfFiles.length; i++)
			{
				if (listOfFiles[i].getName().endsWith(".class")
						&& !listOfFiles[i].getName().contains("$"))
				{
					String className = getClass().getPackage().getName()
							+ ".entityDefinitions."
							+ listOfFiles[i].getName().split("\\.class")[0];
					Class<?> entityClass = ModuleLoader.loadClass(className);
					AbstractEntity def;
					try
					{
						def = (AbstractEntity) entityClass.newInstance();
					} catch (InstantiationException e)
					{
						throw new RuntimeException(e);
					} catch (IllegalAccessException e)
					{
						throw new RuntimeException(e);
					}
					if (def instanceof AbstractOrmEntity)
						addDefinitionEntity((AbstractOrmEntity) def);
				}
			}
			entityCache.put(getSystemName(), entityDefinitionList);
		}
		else
		{
			entityDefinitionList = entityCache.get(getSystemName());
			for (AbstractEntity entity : entityDefinitionList.values())
			{
				entity.reset();
			}
		}
!!!128652.java!!!	addAction(inout action : AbstractAction) : void
		actionList.put(action.getSystemName(), action);
		action.setOwnedByModul(this);
!!!128780.java!!!	addDefinitionEntity(inout definitinEntity : AbstractOrmEntity) : void
		entityDefinitionList.put(definitinEntity.getSystemName(),
				definitinEntity);
!!!128908.java!!!	getEntityDefinitionList() : AbstractOrmEntity
		return entityDefinitionList;
!!!129036.java!!!	getActionList() : AbstractAction
		return actionList;
!!!129164.java!!!	getEntityDefinition(in entityDefinitionName : String) : AbstractOrmEntity
		AbstractOrmEntity entity = null;
		try
		{
			entity = entityDefinitionList.get(entityDefinitionName);
		} catch (NullPointerException e)
		{
			throw new ModuleException("entity: " + entityDefinitionName
					+ " introuvable");
		}

		if (entity == null)
			throw new ModuleException("entity: " + entityDefinitionName
					+ " introuvable");

		return entity;
!!!129292.java!!!	getAction(in actionName : String) : AbstractAction
		AbstractAction action = null;

		if (actionName.equals("default"))
			actionName = getDefaultAction();

		try
		{
			action = actionList.get(actionName);
		} catch (NullPointerException e)
		{
			throw new ModuleException("Action: " + actionName + " introuvable");
		}

		if (action == null)
			throw new ModuleException("Action: " + actionName + " introuvable");

		return action;
!!!129420.java!!!	initDB() : void
		// on trouve l'ID du groupe admin
		Groups group = new Groups();
		group.setData("groupName", "admin");
		int adminGroupsID = (Integer) ((Groups) Orm.select(group).get(0))
				.getData(group.getPrimaryKeyName());
		int rightID;
		GroupsRight GroupsRight = new GroupsRight();

		// on donne au group admin le droit
		// todo: a changé si l'on gère les dépendance de module
		Right searchRight = new Right();
		searchRight.setData("moduleName", getSystemName());

		for (AbstractOrmEntity right : Orm.select(searchRight))
		{
			rightID = (Integer) ((Right) right).getData(right
					.getPrimaryKeyName());

			// cree le GroupsRight
			GroupsRight.setData("groupsID", adminGroupsID);
			GroupsRight.setData("rightID", rightID);
			Orm.insert(GroupsRight);
		}
!!!129548.java!!!	doAction(in actionName : String, inout parameters : Hashtable<String, String>) : AbstractEntity
		AbstractAction action = getAction(actionName);
		return action.perform(parameters);
!!!129676.java!!!	doAction(in actionName : String, in entityName : String, inout parameters : Hashtable<String, String>) : AbstractEntity
		AbstractOrmEntity entity;
		try
		{
			entity = getEntityDefinition(entityName).getClass().newInstance();
		} catch (InstantiationException e)
		{
			throw new RuntimeException(e);
		} catch (IllegalAccessException e)
		{
			throw new RuntimeException(e);
		}
		entity.getFields().setFromHashTable(parameters);
		if (actionName.equals("New"))
			return entity.newUI(parameters);
		if (actionName.equals("Delete"))
			return entity.deleteUI(parameters);
		if (actionName.equals("Edit"))
			return entity.editUI(parameters, false);
		if (actionName.equals("GetList"))
			return entity.getList(parameters);
		if (actionName.equals("Get"))
			return entity.editUI(parameters, true);

		throw new ActionNotFoundException("l'action " + actionName
				+ "de l'entity" + entityName + "n'existe pas");
!!!129804.java!!!	getGlobalActionMenu() : NaturalMap
		if (globalActionList == null)
			globalActionList = new NaturalMap<String, AbstractAction>();

		return globalActionList;
!!!129932.java!!!	addGlobalActionMenuItem(in name : String, inout action : AbstractAction) : void
		getGlobalActionMenu().put(name, action);
!!!130060.java!!!	addGlobalActionButton(inout actionLink : ActionLink) : void
		getGlobalActionButtonList().add(actionLink);
!!!130188.java!!!	getGlobalActionButtonList() : ActionLink
		if (globalActionButtonList == null)
			globalActionButtonList = new Vector<ActionLink>();
		return globalActionButtonList;
!!!130316.java!!!	getDefaultEntity() : String
		return defaultEntity;
!!!130444.java!!!	getVisibleName() : String
		if (visibleName == null)
			visibleName = getSystemName();

		return visibleName;
!!!130572.java!!!	setVisibleName(in visibleName : String) : void
		this.visibleName = visibleName;
!!!130700.java!!!	equals(inout obj : Object) : boolean
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Module))
			return false;
		Module other = (Module) obj;
		if (actionList == null)
		{
			if (other.actionList != null)
				return false;
		}
		else if (!actionList.equals(other.actionList))
			return false;
		if (defaultAction == null)
		{
			if (other.defaultAction != null)
				return false;
		}
		else if (!defaultAction.equals(other.defaultAction))
			return false;
		if (defaultEntity == null)
		{
			if (other.defaultEntity != null)
				return false;
		}
		else if (!defaultEntity.equals(other.defaultEntity))
			return false;
		if (entityDefinitionList == null)
		{
			if (other.entityDefinitionList != null)
				return false;
		}
		else if (!entityDefinitionList.equals(other.entityDefinitionList))
			return false;
		if (globalActionList == null)
		{
			if (other.globalActionList != null)
				return false;
		}
		else if (!globalActionList.equals(other.globalActionList))
			return false;
		if (visibleName == null)
		{
			if (other.visibleName != null)
				return false;
		}
		else if (!visibleName.equals(other.visibleName))
			return false;
		return true;
!!!130828.java!!!	getSystemName() : String
		return getClass().getSimpleName();
!!!130956.java!!!	getGlobalActionMenuOrReturnDefaultBehavior() : NaturalMap
		if (getGlobalActionMenu().size() < 1)
			return getDefaultBehaviorMenu();
		return getGlobalActionMenu();
!!!131084.java!!!	getDefaultBehaviorMenu() : NaturalMap
		if (defaultBehaviorMenu == null)
		{
			defaultBehaviorMenu = new NaturalMap<String, AbstractAction>();
			Collection<AbstractOrmEntity> currentEntityDefinitionList = getEntityDefinitionList()
					.values();
			for (AbstractOrmEntity entity : currentEntityDefinitionList)
			{
				if (entity == null)
					continue;
				entity.initFields();
				String visibleActionName = entity.getVisibleName();

				if (visibleActionName == null)
					continue;
				if (!defaultBehaviorMenu.containsKey(visibleActionName))
					try
					{
						defaultBehaviorMenu.put(visibleActionName,
								new BaseAction("GetList", entity.getClass()
										.newInstance()));
					} catch (InstantiationException e)
					{
						throw new RuntimeException(e);
					} catch (IllegalAccessException e)
					{
						throw new RuntimeException(e);
					}
			}
		}
		return defaultBehaviorMenu;
!!!131212.java!!!	isVisible() : boolean
		return visible;
!!!131340.java!!!	setVisible(inout visible : boolean) : void
		this.visible = visible;
!!!131468.java!!!	resetCache() : void
		ActionCache.clear();
		entityCache.clear();
