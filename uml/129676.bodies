class FlagPool
!!!179980.java!!!	FlagPool(inout sourceEntityDefinition : AbstractOrmEntity, in visibleDescription : String, inout intermediateEntityDefinition : AbstractOrmEntity, in intermediateKeyIn : String, in intermediateKeyOut : String, inout foreignEntityDefinition : AbstractOrmEntity, in foreignKey : String, inout foreignDescriptionUiControls : Vector<String>)
		if (sourceEntityDefinition == null || foreignEntityDefinition == null)
			throw new RuntimeException(
					"Source entity and target entity can't be null");

		this.sourceEntityDefinition = sourceEntityDefinition;
		this.visibleDescription = visibleDescription;
		this.intermediateEntityDefinition = intermediateEntityDefinition;
		this.intermediateKeyIn = intermediateKeyIn;
		this.intermediateKeyOut = intermediateKeyOut;
		this.foreignEntityDefinition = foreignEntityDefinition;
		this.foreignKey = foreignKey;
		this.foreignDescriptionUiControls = foreignDescriptionUiControls;
!!!180108.java!!!	getVisibleDescription() : String
		return visibleDescription;
!!!180236.java!!!	getAvailableElementList() : TreeMap<String, String>
		// todo: correct deprecate
		Vector<AbstractOrmEntity> entityList = Orm.select(
				foreignEntityDefinition, null);

		TreeMap<String, String> availableElementList = new TreeMap<String, String>();

		String description;
		for (AbstractOrmEntity entity : entityList)
		{
			description = getForeignDescription(entity);

			while (availableElementList.containsKey(description))
				description += "_bis";

			availableElementList.put(
					description,
					intermediateEntityDefinition.getSystemName() + "."
							+ intermediateKeyOut + "."
							+ entity.getDataString(foreignKey));
		}

		return availableElementList;
!!!180364.java!!!	getForeignDescription(inout entity : AbstractOrmEntity) : String
		String description = "";
		String currentValue;
		for (String key : foreignDescriptionUiControls)
		{
			currentValue = entity.getDataString(key);

			if (currentValue == null)
				currentValue = "null";

			if (!currentValue.equals("null") || description.equals(""))
			{
				ListOfValue listOfValue = entity.tryMatchListOfValue(key);

				if (listOfValue != null)
					description += listOfValue.getElements().get(currentValue);
				else
					description += currentValue;

				description += " ";
			}
			else
				description += " - ";
		}
		return description.trim();
!!!180492.java!!!	getCheckedElementList() : HashSet<String>
		HashSet<String> checkedElementList = new HashSet<String>();

		for (AbstractOrmEntity entity : getPositivePluralIntermediateAccessor())
			checkedElementList.add(intermediateEntityDefinition.getSystemName()
					+ "." + intermediateKeyOut + "."
					+ entity.getDataString(intermediateKeyOut));

		return checkedElementList;
!!!180620.java!!!	query(in currentSourceKeyName : String, inout currentSourceKeyValue : Integer) : void
		sourceKeyName = currentSourceKeyName;
		sourceKeyValue = currentSourceKeyValue.toString();
!!!180748.java!!!	getIntermediateEntityDefinition() : AbstractOrmEntity
		return intermediateEntityDefinition;
!!!180876.java!!!	getForeignEntityDefinition() : AbstractOrmEntity
		return foreignEntityDefinition;
!!!181004.java!!!	getIntermediateKeyIn() : String
		return intermediateKeyIn;
!!!181132.java!!!	getIntermediateKeyOut() : String
		return intermediateKeyOut;
!!!181260.java!!!	getSourceKeyValue() : String
		return sourceKeyValue;
!!!181388.java!!!	getSourceEntityDefinition() : AbstractOrmEntity
		return sourceEntityDefinition;
!!!181516.java!!!	getPositivePluralIntermediateAccessor() : AbstractOrmEntity
		// searchCriteriaEntity can be null

		if (sourceKeyName == null || sourceKeyValue == null)
			throw new RuntimeException(
					"Vous devez préablablement faire une query(clef, valeur) avant d'intéroger les éléments du flag pool");

		try
		{
			intermediateEntityDefinition.setData(intermediateKeyIn,
					sourceKeyValue);
		} catch (FieldNotCompatibleException e)
		{
			int sourceKeyValueNumber = Integer.parseInt(sourceKeyValue);
			intermediateEntityDefinition.setData(intermediateKeyIn,
					sourceKeyValueNumber);
		}

		Vector<AbstractOrmEntity> pluralAccessor = Orm
				.select(intermediateEntityDefinition);

		return pluralAccessor;
!!!181644.java!!!	getPositivePluralForeignAccessor(inout searchCriteriaEntity : AbstractOrmEntity) : PluralAccessor
		// searchCriteriaEntity can be null

		PluralAccessor pluralForeignAccessor = new PluralAccessor(
				foreignEntityDefinition);

		Vector<AbstractOrmEntity> resultSet;

		if (searchCriteriaEntity == null)
		{
			Vector<AbstractOrmEntity> pluralIntermediateAccessor = getPositivePluralIntermediateAccessor();
			for (AbstractOrmEntity intermediateEntity : pluralIntermediateAccessor)
			{
				foreignEntityDefinition.setData(foreignKey,
						intermediateEntity.getData(intermediateKeyOut));

				resultSet = Orm.select(foreignEntityDefinition);

				for (AbstractOrmEntity result : resultSet)
				{
					pluralForeignAccessor.add(result);
				}
			}
		}
		else
		{
			resultSet = Orm.select(searchCriteriaEntity);

			AbstractOrmEntity criteredIntermediateEntityDefinition;
			try
			{
				criteredIntermediateEntityDefinition = intermediateEntityDefinition
						.getClass().newInstance();
			} catch (InstantiationException e)
			{
				throw new RuntimeException(e);
			} catch (IllegalAccessException e)
			{
				throw new RuntimeException(e);
			}
			criteredIntermediateEntityDefinition.initFields();

			for (AbstractOrmEntity result : resultSet)
			{
				Vector<AbstractOrmEntity> intermediateResultSet;

				criteredIntermediateEntityDefinition.setData(
						intermediateKeyOut, result.getPrimaryKeyValue());
				criteredIntermediateEntityDefinition.setData(intermediateKeyIn,
						sourceEntityDefinition.getPrimaryKeyValue());

				intermediateResultSet = Orm
						.select(criteredIntermediateEntityDefinition);

				if (intermediateResultSet.size() > 0)
					pluralForeignAccessor.add(result);
			}
		}

		return pluralForeignAccessor;
